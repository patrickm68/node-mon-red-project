{
    "common": {
        "label": {
            "payload": "Payload",
            "topic": "Topic",
            "name": "Name",
            "username": "Username",
            "password": "Password"
        },
        "status": {
            "connected": "connected",
            "not-connected": "not connected",
            "disconnected": "disconnected",
            "connecting": "connecting",
            "error": "error",
            "ok": "OK"
        },
        "notification": {
            "error": "<strong>Error</strong>: __message__",
            "errors": {
                "not-deployed": "node not deployed",
                "no-response": "no response from server",
                "unexpected": "unexpected error (__status__) __message__"
            }
        },
        "errors": {
            "nooverride": "Warning: msg properties can no longer override set node properties. See bit.ly/nr-override-msg-props"
        }
    },
    "inject": {
        "inject": "inject",
        "repeat": "repeat = __repeat__",
        "crontab": "crontab = __crontab__",
        "stopped": "stopped",
        "failed": "Inject failed: __error__",
        "label": {
            "repeat": "Repeat"
        },
        "timestamp": "timestamp",
        "string": "string",
        "blank": "blank",
        "none": "none",
        "interval": "interval",
        "interval-time": "interval between times",
        "time": "at a specific time",
        "seconds": "seconds",
        "minutes": "minutes",
        "hours": "hours",
        "between": "between",
        "at": "at",
        "and": "and",
        "every": "every",
        "days": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
        ],
        "on": "on",
        "onstart": "Inject once at start?",
        "tip": "<b>Note:</b> \"interval between times\" and \"at a specific time\" will use cron.<br/>See info box for details.",
        "success": "Successfully injected: __label__",
        "errors": {
            "failed": "inject failed, see log for details"
        }
    },
    "catch": {
        "catch": "catch"
    },
    "debug": {
        "output": "Output",
        "msgprop": "message property",
        "msgobj": "complete msg object",
        "to": "to",
        "debtab": "debug tab",
        "tabcon": "debug tab and console",
        "notification": {
            "activated": "Successfully activated: __label__",
            "deactivated": "Successfully deactivated: __label__"
        },
        "sidebarTitle": "debug"
    },
    "exec": {
        "spawnerr": "Spawn command must be just the command - no spaces or extra parameters",
        "badstdout": "Bad STDOUT",
        "label": {
            "command": "Command",
            "append": "Append"
        },
        "placeholder": {
            "extraparams": "extra input parameters"
        },
        "spawn": "Use spawn() instead of exec()?",
        "tip": "Tip: <i>spawn</i> expects only one command word - and appended args to be comma separated."
    },
    "function": {
        "label": {
            "function": "Function",
            "outputs": "Outputs"
        },
        "tip": "See the Info tab for help writing functions."
    },
    "template": {
        "label": {
            "template": "Template",
            "property": "Property"
        },
        "templatevalue": "This is the payload: {{payload}} !"
    },
    "delay": {
        "action": "Action",
        "for": "For",
        "delaymsg": "Delay message",
        "ramdomdelay": "Random delay",
        "limitrate": "Limit rate to",
        "fairqueue": "Topic based fair queue",
        "milisecs": "Miliseconds",
        "secs": "Seconds",
        "sec": "Second",
        "mins": "Minutes",
        "min": "Minute",
        "hours": "Hours",
        "hour": "Hour",
        "days": "Days",
        "day": "Day",
        "between": "Between",
        "rate": "Rate",
        "msgper": "msg(s) per",
        "dropmsg": "drop intermediate messages",
        "label": {
            "delay": "delay",
            "limitlabel": "limit",
            "randomlabel": "ramdom",
            "queuelabel": "queue"
        },
        "error": {
            "buffer": "buffer exceeded 1000 messages"
        }
    },
    "trigger": {
        "output1": "Output",
        "wait": "then wait",
        "output2": "output",
        "and": "and",
        "below": "the value below",
        "payload": "the existing payload",
        "nothing": "nothing (no output)",
        "milisecs": "Miliseconds",
        "secs": "Seconds",
        "mins": "Minutes",
        "hours": "Hours",
        "notext": "don't extend the timer if retriggered",
        "extend": "extend the timer if retriggered",
        "tip": "Setting the timeout to 0 sets an infinite timeout = single shot.",
        "triggerlabel": "trigger",
        "triggeroncelabel": "trigger once & infinite"
    },
    "comment": {
        "label": {
            "title": "Title",
            "body": "Body" 
        },
        "tip": "Tip: The text can be styled as <a href=\"https://help.github.com/articles/markdown-basics/\" target=\"_new\">Github flavoured Markdown</a>",
        "defaulttitle": "Comment node",
        "defaultinfo": "Use this node to add simple documentation.\n\nAnything you add will be rendered in this info panel.\n\nYou may use Markdown syntax to **enhance** the *presentation*."
    },
    "unknown": {
        "label": {
            "unknown": "unknown"
        },
        "tip": "<p>This node is a type unknown to your installation of Node-RED.</p><p><i>If you deploy with the node in this state, it's configuration will be preserved, but the flow will not start until the missing type is installed.</i></p><p>See the Info side bar for more help</p>"
    },
    "mqtt": {
        "label": {
            "broker": "Broker",
            "qos": "QoS",
            "clientid": "Client ID",
            "port": "Port"
        },
        "placeholder": {
            "clientid": "Leave blank for auto generated"
        },
        "retain": "Retain",
        "true": "true",
        "false": "false",
        "tip": "Tip: Leave topic, qos or retain blank if you want to set them via msg properties.",
        "errors": {
            "not-defined": "topic not defined",
            "missing-config": "missing broker configuration",
            "invalid-topic": "Invalid topic specified"
        }
    },
    "httpin": {
        "label": {
            "method": "Method",
            "url": "URL",
            "doc": "Docs",
            "return": "Return"
        },
        "setby": "- set by msg.method -",
        "basicauth": "Use basic authentication?",
        "utf8": "a UTF-8 string",
        "binary": "a binary buffer",
        "json": "a parsed JSON object",
        "tip": {
            "in": "The url will be relative to ",
            "res": "The messages sent to this node <b>must</b> originate from an <i>http input</i> node",
            "req": "Tip: If the JSON parse fails the fetched string is returned as-is."
        },
        "httpreq": "http request",
        "errors": {
            "not-created": "Cannot create http-in node when httpNodeRoot set to false",
            "no-response": "No response object",
            "json-error": "JSON parse error",
            "no-url": "No url specified"
        },
        "status": {
            "requesting": "requesting"
        }
    },
    "websocket": {
        "label": {
            "type": "Type",
            "path": "Path",
            "url": "URL"
        },
        "listenon": "Listen on",
        "connectto": "Connect to",
        "payload": "Send/Receive payload",
        "message": "Send/Receive entire message",
        "tip": {
            "path1": "By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The listener can be configured to send or receive the entire message object as a JSON formatted string.",
            "path2": "This path will be relative to ",
            "url1": "URL should use ws:&#47;&#47; or wss:&#47;&#47; scheme and point to an existing websocket listener.",
            "url2": "By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The client can be configured to send or receive the entire message object as a JSON formatted string."
        },
        "errors": {
            "connect-error": "An error occured on the ws connection: ",
            "send-error": "An error occurred while sending: ",
            "missing-conf": "Missing server configuration"
        }
    },
    "watch": {
        "label": {
            "files": "File(s)"
        },
        "placeholder": {
            "files": "Comma-separated list of files and/or directories"
        },
        "tip": "On Windows you must use double back-slashes \\\\ in any directory names."
    },
    "serial": {
        "label": {
            "serialport": "Serial Port",
            "settings": "Settings",
            "baudrate": "Baud Rate",
            "databits": "Data Bits",
            "parity": "Parity",
            "stopbits": "Stop Bits",
            "input": "Input",
            "split": "Split input",
            "deliver": "and deliver",
            "output": "Output",
            "serial": "serial",
            "none": "none"
        },
        "placeholder": {
            "serialport": "for example: /dev/ttyUSB0/"
        },
        "parity": {
            "none": "None",
            "even": "Even",
            "mark": "Mark",
            "odd": "Odd",
            "space": "Space"
        },
        "split": {
            "character": "on the character",
            "timeout": "after a timeout of",
            "length": "into fixed lengths of"
        },
        "output": {
            "ascii": "ascii strings",
            "binary": "binary buffers"
        },
        "addsplit": "add split character to output messages",
        "tip": {
            "split": "Tip: the \"Split on\" character is used to split the input into separate messages. It can also be added to every message sent out to the serial port.",
            "timeout": "Tip: In timeout mode timeout starts from arrival of first character."
        },
        "onopen": "serial port __port__ opened at __baud__ baud __config__",
        "errors": {
            "missing-conf": "missing serial config",
            "serial-port": "serial port",
            "error": "serial port __port__ error: __error__",
            "unexpected-close": "serial port __port__ closed unexpectedly",
            "disconnected": "serial port __port__ disconnected",
            "closed": "serial port __port__ closed"
        }
    },
    "tcpin": {
        "label": {
            "type": "Type",
            "output": "Output",
            "port": "port",
            "host": "at host",
            "payload": "payload(s)",
            "delimited": "delimited by",
            "close-connection": "Close connection after each message is sent?",
            "decode-base64": "Decode Base64 message?",
            "server": "Server",
            "return": "Return"
        },
        "type": {
            "listen": "Listen on",
            "connect": "Connect to",
            "reply": "Reply to TCP"
        },
        "output": {
            "stream": "stream of",
            "single": "single",
            "buffer": "Buffer",
            "string": "String",
            "base64": "Base64 String"
        },
        "return": {
            "timeout": "after a fixed timeout of",
            "character": "when character received is",
            "number": "a fixed number of chars:",
            "never": "keep connection open"
        },
        "status": {
            "connecting": "connecting to __host__:__port__",
            "connected": "connected to __host__:__port__",
            "listening-port": "listening on port __port__",
            "stopped-listening": "stopped listening on port",
            "connection-from": "connection from __host__:__port__",
            "connection-closed": "connection closed from __host__:__port__",
            "connections": "__count__ connection",
            "connections_plural": "__count__ connections"
            
        },
        "errors": {
            "connection-lost": "connection lost to __host__:__port__",
            "timeout": "timeout closed socket port __port__",
            "cannot-listen": "unable to listen on port __port__, error: __error__",
            "error": "error: __error__",
            
            "socket-error": "socket error from __host__:__port__",
            "no-host": "Host and/or port not set",
            "connect-timeout": "connect timeout",
            "connect-fail": "connect failed"
        }
    },
    "udp": {
        "label": {
            "listen": "Listen for",
            "onport": "on Port",
            "using": "using",
            "output": "Output",
            "group": "Group",
            "interface": "Interface",
            "send": "Send a",
            "toport": "to port",
            "address": "Address",
            "decode-base64": "Decode Base64 encoded payload?"
        },
        "placeholder": {
            "interface": "(optional) ip address of eth0",
            "address": "destination ip"
        },
        "udpmsgs": "udp messages",
        "mcmsgs": "multicast messages",
        "udpmsg": "udp message",
        "bcmsg": "broadcast message",
        "mcmsg": "multicast message",
        "output": {
            "buffer": "a Buffer",
            "string": "a String",
            "base64": "a Base64 encoded string"
        },
        "bind": {
            "random": "bind to random local port",
            "local": "bind to local port",
            "target": "bind to target port"
        },
        "tip": {
            "in": "Tip: Make sure your firewall will allow the data in.",
            "out": "Tip: leave address and port blank if you want to set using <b>msg.ip</b> and <b>msg.port</b>."
        },
        "status": {
            "listener-at": "udp listener at __host__:__port__",
            "mc-group": "udp multicast group __group__",
            "listener-stopped": "udp listener stopped",
            "output-stopped": "udp output stopped",
            "mc-ready": "udp multicast ready: __outport__ -> __host__:__port__",
            "bc-ready": "udp broadcast ready: __outport__ -> __host__:__port__",
            "ready": "udp ready: __outport__ -> __host__:__port__",
            "ready-nolocal": "udp ready: __host__:__port__"
        },
        "errors": {
            "access-error": "UDP access error, you may need root access for ports below 1024",
            "error": "error: __error_",
            "bad-mcaddress": "Bad Multicast Address",
            "interface": "Must be ip address of the required interface",
            "ip-notset": "udp: ip address not set",
            "port-notset": "udp: port not set",
            "port-invalid": "udp: port number not valid"
        }
    },
    "switch": {
        "label": {
            "property": "Property",
            "rule": "rule"
        },
        "checkall": "checking all rules",
        "stopfirst": "stopping after first match",
        "rules": {
            "btwn":"is between",
            "cont":"contains",
            "regex":"matches regex",
            "true":"is true",
            "false":"is false",
            "null":"is null",
            "nnull":"is not null",
            "else":"otherwise"
        }
    },
    "change": {
        "label": {
            "rules": "Rules",
            "rule": "rule",
            "set": "set __property__",
            "change": "change __property__",
            "delete": "delete __property__",
            "changeCount": "change: __count__ rules",
            "regex": "Use regular expressions"
        },
        "action": {
            "set": "Set",
            "change": "Change",
            "delete": "Delete",
            "to": "to",
            "search": "Search for",
            "replace": "Replace with"
        },
        "errors": {
            "invalid-from": "Invalid 'from' property: __error__"
        }
    },
    "range": {
        "label": {
            "action": "Action",
            "inputrange": "Map the input range",
            "resultrange": "to the result range",
            "from": "from",
            "to": "to",
            "roundresult": "Round result to the nearest integer?"
        },
        "placeholder": {
            "min": "e.g. 0",
            "maxin": "e.g. 99",
            "maxout": "e.g. 255"
        },
        "scale": {
            "payload": "Scale msg.payload",
            "limit": "Scale and limit to the target range",
            "wrap": "Scale and wrap within the target range"
        },
        "tip": "Tip: This node ONLY works with numbers.",
        "errors": {
            "notnumber": "Not a number"
        }
    },
    "csv": {
        "label": {
            "columns": "Columns",
            "separator": "Separator",
            "c2o": "CSV-to-Object options",
            "o2c": "Object-to-CSV options",
            "input": "Input",
            "firstrow": "first row contains column names",
            "output": "Output",
            "includerow": "include column name row",
            "newline": "Newline"
        },
        "placeholder": {
            "columns": "comma-separated column names"
        },
        "separator": {
            "comma": "comma",
            "tab": "tab",
            "space": "space",
            "semicolon": "semicolon",
            "colon": "colon",
            "hashtag": "hashtag",
            "other": "other..."
        },
        "output": {
            "row": "a message per row",
            "array": "a single message [array]"
        },
        "newline": {
            "linux": "Linux (\\n)",
            "mac": "Mac (\\r)",
            "windows": "Windows (\\r\\n)"
        },
        "errors": {
            "csv_js": "This node only handles csv strings or js objects."
        }
    },
    "html": {
        "label": {
            "select": "Select",
            "output": "Output"
        },
        "output": {
            "html": "the html content of the elements",
            "text": "only the text content of the elements"
        },
        "format": {
            "single": "as a single message containing an array",
            "multi": "as multiple messages, one for each element"
        },
        "tip": "Tip: The <b>Select</b> value is a <a href=\"https://github.com/fb55/CSSselect#user-content-supported-selectors\" target=\"_new\"><i><u>CSS Selector</u></i></a>, similar to a jQuery selector."
    },
    "json": {
        "errors": {
            "dropped-object": "Ignored non-object payload",
            "dropped": "Ignored unsupported payload type"
        }
    },
    "xml": {
        "label": {
            "represent": "Represent XML tag attributes as a property named",
            "prefix": "Prefix to access character content",
            "advanced": "Advanced options"
        },
        "tip": "There is no simple way to convert XML attributes to JSON so the approach taken here is to add a property, named $ by default, to the JSON structure.",
        "errors": {
            "xml_js": "This node only handles xml strings or js objects."
        }
    },
    "arduino": {
        "label": {
            "pin": "Pin",
            "type": "Type",
            "port": "Port"
        },
        "placeholder": {
            "port": "e.g. /dev/ttyUSB0  COM1"
        },
        "status": {
            "connectfirst": "connecting to first board found",
            "connect": "connecting to __device__",
            "connected": "connected to __device__",
            "version": "version: __version__",
            "portclosed": "port closed"
        },
        "state": {
            "in": {
                "digital": "Digital pin",
                "analogue": "Analogue pin"
            },
            "out": {
                "digital": "Digital (0/1)",
                "analogue": "Analogue (0-255)",
                "servo": "Servo (0-180)"
            }
        },
        "tip": {
            "io": "<b>Note:</b> You cannot use the same pin for both output and input.",
            "conf": "<b>Tip:</b> Use search to try to auto-detect serial port."
        },
        "errors": {
            "portnotconf": "port not configured",
            "devnotfound": "device __dev__ not found. Trying to find board."
        }
    },
    "rpi-gpio": {
        "label": {
            "gpiopin": "GPIO Pin",
            "selectpin": "select pin",
            "registor": "Registor?",
            "readinitial": "Read initial state of pin on deploy/restart?",
            "type": "Type",
            "initpin": "Initialise pin state?",
            "button": "Button",
            "pimouse": "Pi Mouse",
            "left": "Left",
            "right": "Right",
            "middle": "Middle"
        },
        "registor": {
            "none": "none",
            "pullup": "pullup",
            "pulldown": "pulldown"
        },
        "digout": "Digital output",
        "pwmout": "PWM output",
        "initpin0": "initial level of pin - low (0)",
        "initpin1": "initial level of pin - high (1)",
        "left": "left",
        "right": "right",
        "middle": "middle",
        "any": "any",
        "pinname": "Pin",
        "alreadyuse": "already in use",
        "alreadyset": "already set as",
        "tip": {
            "pin": "<b>Pins in Use</b>: ",
            "in": "Tip: Only Digital Input is supported - input must be 0 or 1.",
            "dig": "<b>Tip</b>: For digital output - input must be 0 or 1.",
            "pwm": "<b>Tip</b>: For PWM output - input must be between 0 to 100."
        },
        "types": {
            "digout": "digital output",
            "input": "input",
            "pullup": "input with pull up",
            "pulldown": "input with pull down",
            "pwmout": "PWM output"
        },
        "status": {
            "stopped": "stopped",
            "closed": "closed",
            "not-running": "not running"
        },
        "errors": {
            "ignorenode": "Ignoring Raspberry Pi specific node",
            "version": "Version command failed",
            "sawpitype": "Saw Pi Type",
            "libnotfound": "Cannot find Pi RPi.GPIO python library",
            "alreadyset": "GPIO pin __pin__ already set as type: __type__",
            "invalidpin": "Invalid GPIO pin",
            "invalidinput": "Invalid input",
            "needtobeexecutable": "__command__ needs to be executable",
            "mustbeexecutable": "nrgpio must to be executable",
            "commandnotfound": "nrgpio command not found",
            "commandnotexecutable": "nrgpio command not executable",
            "error": "error: __error__",
            "pythoncommandnotfound": "nrpgio python command not running"
        }
    },
    "tail": {
        "label": {
            "filename": "Filename",
            "splitlines": "Split lines on \\n?"
        },
        "errors": {
            "windowsnotsupport": "Not currently supported on Windows."
        }
    },
    "file": {
        "label": {
            "filename": "Filename",
            "action": "Action",
            "addnewline": "Add newline (\\n) to each payload?",
            "outputas": "Output as",
            "filelabel": "file",
            "deletelabel": "delete __file__"
        },
        "action": {
            "append": "append to file",
            "overwrite": "overwrite file",
            "delete": "delete file"
        },
        "output": {
            "utf8": "a utf8 string",
            "buffer": "a Buffer"
        },
        "status": {
            "wrotefile": "wrote to file: __file__",
            "deletedfile": "deleted file: __file__",
            "appendedfile": "appended to file: __file__"
        },
        "errors": {
            "nofilename": "No filename specified",
            "invaliddelete": "Warning: Invalid delete. Please use specific delete option in config dialog.",
            "deletefail": "failed to delete file: __error__",
            "writefail": "failed to write to file: __error__",
            "appendfail": "failed to append to file: __error__"
        }
    },
    "redisout": {
        "label": {
            "host": "Host",
            "port": "Port",
            "key": "Key",
            "type": "Type"
        },
        "type": {
            "string": "String",
            "hash": "Hash",
            "set": "Set",
            "list": "List"
        },
        "tip": "If key is blank, the topic will be used as the key.<br>If type is hash, payload should be an object or field=value string.",
        "errors": {
            "invalidpayload": "Invalid payload for redis hash",
            "nokey": "No key or topic set"
        }
    },
    "mongodb": {
        "label": {
            "host": "Host",
            "port": "Port",
            "database": "Database",
            "username": "Username",
            "password": "Password",
            "server": "Server",
            "collection": "Collection",
            "operation": "Operation",
            "onlystore": "Only store msg.payload object",
            "createnew": "Create a new document if no match found",
            "updateall": "Update all matching documents"
        },
        "operation": {
            "save": "save",
            "insert": "insert",
            "update": "update",
            "remove": "remove",
            "find": "find",
            "count": "count",
            "aggregate": "aggregate"
        },
        "tip": "<b> Tip:</b> If no collection is set, ensure <b>msg.collection</b> will contain the collection name",
        "errors": {
            "nocollection": "No collection defined",
            "missingconfig": "missing mongodb configuration"
        }
    },
    "feedparse": {
        "label": {
            "feedurl": "Feed url",
            "refresh": "Refresh",
            "minutes": "minutes"
        },
        "errors": {
            "badstatuscode": "error - Bad status code",
            "invalidurl": "Invalid url"
        }
    },
    "email": {
        "label": {
            "to": "To",
            "server": "Server",
            "port": "Port",
            "userid": "Userid",
            "password": "Password",
            "repeat": "Refresh",
            "seconds": "seconds",
            "folder": "Folder"
        },
        
        "default-message": "Your file from Node-RED is attached: __filename__ __description__",

        
        "tip": {
            "cred": "<b>Note:</b> Copied credentials from global emailkeys.js file.",
            "recent": "Tip: Only retrieves the single most recent email."
        },
        "status": {
            "messagesent": "Message sent: __response__",
            "fetching": "fetching",
            "foldererror": "fetch folder error",
            "messageerror": "fetch message error",
            "message": "message #__number__",
            "newemail": "received new email: __topic__",
            "duplicate": "duplicate not sent: __topic__",
            "inboxzero": "you have achieved Inbox Zero",
            "sending": "sending",
            "sendfail": "send failed",
            "connecterror": "connect error"
        },
        "errors": {
            "nouserid": "No e-mail userid set",
            "nopassword": "No e-mail password set",
            "nocredentials": "No Email credentials found. See info panel.",
            "nopayload": "No payload to send",            
            "fetchfail": "Failed to fetch folder: __folder__",
            "messageerror": "Fetch message error: __error__"
        }
    },
    "irc": {
        "label": {
            "ircserver": "IRC Server",
            "channel": "Channel",
            "action": "Action",
            "port": "Port",
            "ssl": "Use Secure SSL connection?",
            "self": "Allow self-signed certificates?",
            "nickname": "Nickname"
        },
        "payload": "Send payload to channel(s)",
        "topic": "Use msg.topic to set nickname or channel(s)",
        "msg": "Send complete msg object to channel(s)",
        "tip": {
            "in": "The channel to join must start with a #<br/>You may join multiple channels by comma separating a list - #chan1,#chan2,etc.",
            "out": "The channel to join must start with a #<br/>Sending the complete object will stringify the whole msg object before sending."
        },
        "errors": {
            "connect": "CONNECT",
            "err": "ERR",
            "net": "NET",
            "connected": "CONNECTED",
            "online": "ONLINE",
            "joined": "JOINED",
            "ping": "PING from",
            "quit": "QUIT",
            "restart": "restart",
            "connectionlost": "CONNECTION LOST?",
            "hasjoined": "has joined",
            "sentinvite": "sent invite to",
            "hasleft": "has left",
            "hasquit": "has quit",
            "kickedfrom": "was kicked from",
            "rawcommand": "RAW command",
            "topicnotset": "msg.topic not set"
        }
    },
    "twitter": {
        "label": {
            "twitter-id":"Twitter ID",
            "search": "Search",
            "for": "for",
            "user": "User",
            "dmslabel": "DMs",
            "tweetslabel": "tweets",
            "clickhere": "Click here to authenticate with Twitter."
        },
        "placeholder": {
            "for": "comma-separated words, @ids, #tags",
            "user": "comma-separated @twitter handles"
        },
        "search": {
            "public": "all public tweets",
            "follow": "the tweets of who you follow",
            "user": "the tweets of specific users",
            "direct": "your direct messages"
        },
        "tip": "Tip: Use commas without spaces between multiple search terms. Comma = OR, Space = AND.<br/>The Twitter API WILL NOT deliver 100% of all tweets.<br/>Tweets of who you follow will include their retweets and favourites.",
        "status": {
            "using-geo": "Using geo location: __location__",
            "tweeting": "tweeting",
            "failed":"failed"
        },
        "errors": {
            "ratelimit":"tweet rate limit hit",
            "streamerror":"stream error: __error__ (__rc__)",
            "unexpectedend":"stream ended unexpectedly",
            "invalidtag":"invalid tag property",
            "missingcredentials":"missing twitter credentials",
            "truncated":"truncated tweet greater than 140 characters",
            "sendfail":"send tweet failed: __error__",
            "nopayload":"no payload to tweet",
            
            "oauthbroke":"something in twitter oauth broke.",
            "oautherror": "<html><head></head><body><p>Something went wrong with the authentication process. The following error was returned:</p><p><b>__statusCode__</b>: __errorData__</p><p>One known cause of this type of failure is if the clock is wrong on system running Node-RED</p></body></html>",
            "authorized": "<html><head></head><body><p>Authorised - you can close this window and return to Node-RED</p></body></html>"
        }
    }
}
