/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
(function($) {

/**
 * options:
 *   - data : array - initial items to display in tree
 *
 * methods:
 *   - data(items) - clears existing items and replaces with new data
 *
 * events:
 *   - treelistselect : function(event, item) {}
 *
 *
 * data:
 * [
 *     {
 *         label: 'Local', // label for the item
 *         icon: 'fa fa-rocket', // (optional) icon for the item
 *         selected: true/false, // (optional) if present, display checkbox accordingly
 *         children: [] | function(item,done) // (optional) an array of child items, or a function
 *                                       // that will call the `done` callback with an array
 *                                       // of child items
 *     }
 * ]
 *
 *
 *
 * var treeList = $("<div>").css({width: "100%", height: "100%"}).treeList({data:[...]})
 * treeList.on('treelistselect', function(e,item) { console.log(item)})
 * treeList.treeList('data',[ ... ] )
 *
 */

    $.widget( "nodered.treeList", {
        _create: function() {
            var that = this;

            this.element.addClass('red-ui-treeList');
            var wrapper = $('<div>',{class:'red-ui-treeList-container'}).appendTo(this.element);

            this._data = [];

            this._topList = $('<ol>').css({
                position:'absolute',
                top: 0,
                left:0,
                right:0,
                bottom:0
            }).appendTo(wrapper).editableList({
                addButton: false,
                scrollOnAdd: false,
                height: '100%',
                addItem: function(container,i,item) {
                    that._addSubtree(that._topList,container,item,0);
                }
            });
            if (this.options.data) {
                this.data(this.options.data);
            }
        },
        _addChildren: function(container,children,depth) {
            var that = this;
            var subtree = $('<ol>').appendTo(container).editableList({
                addButton: false,
                scrollOnAdd: false,
                height: 'auto',
                addItem: function(container,i,item) {
                    that._addSubtree(subtree,container,item,depth+1);
                }
            });
            for (var i=0;i<children.length;i++) {
                subtree.editableList('addItem',children[i])
            }
            return subtree;
        },
        _addSubtree: function(parentList, container, item, depth) {
            var that = this;
            item.treeList = {};
            item.treeList.parentList = parentList;
            item.treeList.remove = function() {
                parentList.editableList('removeItem',item);
            }
            var labelNodeType = "<label>";
            if (item.children && item.hasOwnProperty('selected')) {
                labelNodeType = "<div>";
            }
            var label = $(labelNodeType,{tabindex:"0",class:"red-ui-treeList-label"}).appendTo(container);
            item.treeList.label = label;
            if (item.class) {
                label.addClass(item.class);
            }
            label.css({
                paddingLeft: (depth*15)+'px'
            })
            label.on('mouseover',function(e) { that._trigger('itemmouseover',e,item); })
            label.on('mouseout',function(e) { that._trigger('itemmouseout',e,item); })

            if (item.children) {
                item.treeList.addChild = function(newItem) {
                    item.treeList.childList.editableList('addItem',newItem)
                    item.children.push(newItem);
                }
                item.treeList.expand = function() {
                    if (!container.hasClass("built") && typeof item.children === 'function') {
                        container.addClass('built');
                        var childrenAdded = false;
                        var spinner;
                        item.children(item,function(children) {
                            childrenAdded = true;
                            item.treeList.childList = that._addChildren(container,children,depth);
                            if (spinner) {
                                spinner.remove();
                            }
                            that._trigger("childrenloaded",null,item)
                        });
                        if (!childrenAdded) {
                            spinner = $('<div class="red-ui-treeList-spinner">').css({
                                "background-position": (35+depth*15)+'px 50%'
                            }).appendTo(container);
                        }

                    }
                    container.addClass("expanded");
                }
                item.treeList.collapse = function() {
                    container.removeClass("expanded");
                }

                $('<span class="red-ui-treeList-icon"><i class="fa fa-angle-right" /></span>').appendTo(label);
                // $('<span class="red-ui-treeList-icon"><i class="fa fa-folder-o" /></span>').appendTo(label);
                label.click(function(e) {
                    if (container.hasClass("expanded")) {
                        item.treeList.collapse();
                    } else {
                        item.treeList.expand();
                    }
                })
            } else {
                $('<span class="red-ui-treeList-icon"></span>').appendTo(label);
            }
            if (item.hasOwnProperty('selected')) {
                var selectWrapper = $('<span class="red-ui-treeList-icon"></span>').appendTo(label);
                var cb = $('<input type="checkbox">').prop('checked',item.selected).appendTo(selectWrapper);
                cb.on('click', function(e) {
                    e.stopPropagation();
                });
                cb.on('change', function(e) {
                    item.selected = this.checked;
                    that._trigger("select",e,item);
                })
            } else {
                label.click(function(e) {
                    that._topList.find(".selected").removeClass("selected");
                    label.addClass("selected");
                    that._trigger("select",e,item)
                })
            }
            if (item.icon) {
                $('<span class="red-ui-treeList-icon"><i class="'+item.icon+'" /></span>').appendTo(label);
            }
            if (item.label) {
                $('<span class="red-ui-treeList-label-text"></span>').text(item.label).appendTo(label);
            } else if (item.element) {
                $(item.element).appendTo(label);
            }
            if (item.children) {
                if (Array.isArray(item.children)) {
                    item.treeList.childList = that._addChildren(container,item.children,depth);
                }
                if (item.expanded) {
                    item.treeList.expand();
                }
            }
        },
        empty: function() {
            this._topList.editableList('empty');
        },
        data: function(items) {
            if (items !== undefined) {
                this._data = items;
                this._topList.editableList('empty');
                for (var i=0; i<items.length;i++) {
                    this._topList.editableList('addItem',items[i]);
                }
                this._trigger("select")

            } else {
                return this._data;
            }
        },
        show: function(id) {
            for (var i=0;i<this._data.length;i++) {
                if (this._data[i].id === id) {
                    this._topList.editableList('show',this._data[i]);
                }
            }
        },
        select: function(item) {
            this._topList.find(".selected").removeClass("selected");
            item.treeList.label.addClass("selected");
            this._trigger("select",null,item)

        },
        selected: function() {
            var s = this._topList.find(".selected").parent().data('data');
            return s;
        }
    });

})(jQuery);
